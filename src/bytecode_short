PUSH1 0X00 // AVOID UNDERFLOW
CALLDATALOAD // load n
PUSH1 0X60 // shift amount
SHR // shift value to right
DUP1
PUSH1 0X00 // n storage
MSTORE
PUSH1 0X00
EQ
PUSH1 0X45
JUMPI
//PUSH1 0x00 // a = 0 value (could remove as 0 anyway)
//PUSH1 0x20 // a = 0 storage
//MSTORE
PUSH1 0x01 // b = 1 value
PUSH1 0x40 // b = 1 storage
MSTORE
PUSH1 0x01 // i = 1 value
PUSH1 0x60 // i = 1 storage
MSTORE

// for loop
JUMPDEST
PUSH1 0x00 // load n memory slot 
MLOAD // load n value onto stack
PUSH1 0X60 // load i from memory
MLOAD // push i value onto stack
GT // want to jump if not i < n
PUSH1 0X45 // push JUMPDEST of RETURN value
JUMPI // jump if end of loop
PUSH1 0X40 // b storage
MLOAD // load b
DUP1 // copy b for assigment to a
PUSH1 0X20 // a storage
MLOAD // load a
ADD // a + b
PUSH1 0X80 // c storage
MSTORE // c = a + b
PUSH1 0X20 // a storage
MSTORE // a = b
PUSH1 0X80 // c storage
MLOAD // load c
PUSH1 0x40 // b storage
MSTORE // b = c
PUSH1 0X60 // i storage
MLOAD // load i
PUSH1 0X01 // value to add
ADD // increment i
PUSH1 0X60 // i storage
MSTORE // store i
PUSH1 0X1A // start of loop dest
JUMP // jump to start of loop

// return b
JUMPDEST
PUSH1 0x40 // b storage
MLOAD // load b
PUSH1 0x60 // shift value
SHL // shift b
PUSH1 0xA0 // b_shift storage
MSTORE // store b
PUSH1 0X20 // b size
PUSH1 0XA0  // b_shift storage
RETURN // return size 0x20 from 0xA0