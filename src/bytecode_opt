PUSH1 0X00 // AVOID UNDERFLOW
DUP1
CALLDATALOAD // load n
PUSH1 0X60 // shift amount
SHR // shift value to right
DUP1
DUP3
MSTORE
EQ
PUSH1 0X41 // jump to return
JUMPI
PUSH1 0x01 // b = 1 value
DUP1 // i = 1 value
PUSH1 0x40 // b = 1 storage
MSTORE
DUP1 // copy i value to leave on stack for loop
PUSH1 0x60 // i = 1 storage
MSTORE
JUMPDEST // for loop ****************************
PUSH1 0x00 // load n memory slot 
MLOAD // load n value onto stack
EQ // want to jump if not i < n
PUSH1 0X41 // push JUMPDEST of RETURN value
JUMPI // jump if end of loop 
PUSH1 0X40 // b storage
MLOAD // load b
DUP1 // copy b for assigment to a
PUSH1 0X20 // a storage
MLOAD // load a
ADD // a + b
PUSH1 0X80 // c storage
MSTORE // store c (a + b)
PUSH1 0X20 // a storage
MSTORE // a = b
PUSH1 0X80 // c storage
MLOAD // load c
PUSH1 0x40 // b storage
MSTORE // b = c
PUSH1 0X60 // i storage i 
MLOAD // load i
PUSH1 0X01 // value to add
ADD // increment i
DUP1 // duplicate i for start of stack
PUSH1 0X60 // i storage
MSTORE // store i
PUSH1 0X18 // start of loop dest
JUMP // jump to start of loop
JUMPDEST // return b ***********************
PUSH1 0X20
PUSH1 0x40 // b storage
DUP1
MLOAD // load b
PUSH1 0x60 // shift value
SHL // shift b
DUP2
MSTORE // store b
RETURN // return size 0x20 from 0x40