PUSH1 0X00 // AVOID UNDERFLOW
DUP1
CALLDATALOAD // load n
PUSH1 0X60 // shift amount
SHR // shift n to right
DUP1 // dup n
DUP3 // dup slot 0x00
MSTORE // n to memory 
EQ // n == 0?
PUSH1 0X41 // return-section location
JUMPI // jump to return-section
PUSH1 0x01 // 1 for 'b = 1' and 'i = 1'
DUP1
PUSH1 0x40 // b memory
MSTORE
DUP1 // copy i value to leave on stack for loop
PUSH1 0x60 // i memory
MSTORE
JUMPDEST // for-loop ****************************
PUSH1 0x00 // n memory
MLOAD
EQ // i < n (i cannot be > n)
PUSH1 0X41 // return-section
JUMPI // go to return-section if end of loop 
PUSH1 0X40 // b memory
MLOAD 
DUP1 // copy b for assigment to a
PUSH1 0X20 // a memory
MLOAD
ADD // a + b
PUSH1 0X80 // c memory
MSTORE // store c (= a + b)
PUSH1 0X20 // a memory
MSTORE // a = b
PUSH1 0X80 // c memory
MLOAD
PUSH1 0x40 // b memory
MSTORE // b = c
PUSH1 0X60 // i memory
MLOAD
PUSH1 0X01 // 1 for increment
ADD // i++
DUP1 // duplicate i for start of stack
PUSH1 0X60 // i memory
MSTORE // store i
PUSH1 0X18 // for-loop location
JUMP 
JUMPDEST // return-section ***********************
PUSH1 0X20 // b size
PUSH1 0x40 // b memory
DUP1
MLOAD // load b
PUSH1 0x60 // shift value
SHL // shift b
DUP2
MSTORE // store b
RETURN // return size 0x20 from 0x40